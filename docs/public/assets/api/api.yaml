openapi: '3.0.2'
info:
  title: DBConvert Stream API Server
  description: "\ Data integration and streaming distributed platform to replicate data between databases\n\
    \ - ‚ôæÔ∏è **Continuous processing.** Right data at the right time, all the time.\n\
    \ - üöÄ **Real-time Data.** Minimal latency from source to destination\n\
    \ - ‚òÅÔ∏è **Fully Scalable.**Cloud-first distributed platform.\n"
  version: '1.0'
  contact:
    url: https://stream.dbconvert.com
externalDocs:
  description: OpenAPI documentation for the DBConvert Stream API Server.
  url: https://stream.dbconvert.com
servers:
  - url: http://127.0.0.1:8020/api/v1
tags:
  - name: Create Streams
    description: Create a new stream from JSON or load from a file.
    externalDocs:
      description: Find out more
      url: https://stream.dbconvert.com
  - name: Stream config
    description: Current stream configuration.
  - name: Stream stat
    description: Current stream statisctics.

components:
  schemas:
    source: 
      type: object
      properties: 
        type: 
          $ref: '#/components/schemas/type'
        connection: 
          type: object
          properties: 
            host: 
              type: string
              example: localhost
            port: 
              type: number
              example: 5432
            user: 
              type: string
              example: postgres
            password: 
              type: string
              example: postgres
            database: 
              type: string
              example: postgres
        settings: 
          type: object
          properties: 
            replicationSlotName: 
              type: string
              example: myslot_1
            publicationName: 
              type: string
              example: dbconvert-publication
        initialLoad: 
          type: boolean
        filter: 
          $ref: '#/components/schemas/filter'
    destination: 
      type: object
      properties: 
        type: 
          $ref: '#/components/schemas/type'
        connection: 
          type: object
          properties: 
            host: 
              type: string
              example: localhost
            port: 
              type: number
              example: 5432
            user: 
              type: string
              example: postgres
            password: 
              type: string
              example: postgres
            database: 
              type: string
              example: destination
        initialLoad: 
          type: boolean
        filter: 
          $ref: '#/components/schemas/filter'
              
    type: 
      type: string
      enum: [postgresql, mysql]
      example: postgresql
    limits: 
      type: object
      properties: 
        events: 
          type: number
          example: 10000
        time: 
          type: number
          example: 10
    filter: 
        type: object
        properties: 
          tables: 
            type: array
            items: 
              type: object
              properties: 
                name: 
                  type: string
                  example: products1
                operations: 
                  type: array
                  items: 
                    type: string
                    enum: [insert, update, delete]
                    example: insert

    create-stream-request:
      title: Create Stream request
      type: object
      required:
        - source
        - destination
      properties:
        source:
          $ref: '#/components/schemas/source'
        destination:
          $ref: '#/components/schemas/destination'
        limits:
          $ref: '#/components/schemas/limits'

paths:
  /streams:
    post:
      tags:
        - Create Streams
      summary: Create a new stream from the specified configuration parameters.
      description: 'This endpoint accepts configuration in JSON format.'
      operationId: create-stream
      requestBody:
        description: |
          Creates a new stream based on the specified parameters specified in a JSON object passed in request body.
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/create-stream-request'
        required: true
      responses:
        '200':
          description: Returns response containing ID of the newly created stream.
          content:
            application/json:
              example: |-
                {
                  "stream":{
                      "id": "2ExM8defbRlfa9ffPJlIF2WaigI"
                  }
                }
        '400':
          description: Returns an error message indicating that the stream is not created successfully.
          content:
            application/json:
              example: |-
                {"error": "json: cannot unmarshal string into Go value of type stream.Stream"}
  
  /streams/load:
    post:
      tags:
        - Create Streams
      summary: Create a new stream from the file on the local disk with specified configuration parameters.
      description: 'This endpoint loads the JSON data from the specified file on the local disk.
      
      
                  _curl --request POST --url http://127.0.0.1:8020/api/v1/streams/load\?file=pg2pg.json_'
      operationId: create-stream-from-file
      parameters:
        - name: file
          example: 'stream-config.json'
          in: query
          description: The name of the file with stream configuration parameters.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns response containing ID of the newly created stream.
          content:
            application/json:
              example: |-
                {
                  "stream":{
                      "id": "2ExM8defbRlfa9ffPJlIF2WaigI"
                  }
                }
        '400':
          description: Returns an error message indicating that the stream is not created successfully.
          content:
            application/json:
              example: |-
                {"error": "the provided file format is not allowed. Please specify JSON configuration"}

  /streams/config:
    get:
      tags:
        - Stream config
      summary: Prints current stream configuration.
      description: 'This endpoint outputs JSON configuration of the current stream'
      operationId: stream-config
      responses:
        '200':
          description: Returns response containing current stream config.
          content:
            application/json:
              example: |-
                {
                  "id": "2F2ajsHSNmyt5aoCoq7GnUZ3quD",
                  "source": {
                    "type": "postgresql",
                    "connection": {
                      "host": "localhost",
                      "port": 5432,
                      "user": "postgres",
                      "password": "postgres",
                      "database": "postgres"
                    },
                    "settings": {
                      "replicationSlotName": "myslot_1",
                      "publicationName": "dbconvert-publication"
                    },
                    "initialLoad": false,
                    "filter": {
                      "tables": [
                        {
                          "name": "products1",
                          "operations": [
                            "insert",
                            "update",
                            "delete"
                          ]
                        },
                        {
                          "name": "products2",
                          "operations": [
                            "insert",
                            "update",
                            "delete"
                          ]
                        }
                      ]
                    }
                  },
                  "destination": {
                    "type": "postgresql",
                    "connection": {
                      "host": "localhost",
                      "port": 5432,
                      "user": "postgres",
                      "password": "postgres",
                      "database": "destination"
                    }
                  },
                  "limits": {
                    "events": 10000,
                    "time": 10
                  }
                }
  
  /streams/source/stat:
    get:
      tags:
        - Stream stat
      summary: Prints current stream Source statistics.
      description: 'This endpoint outputs stat values of the current stream source'
      operationId: stream-source-stat
      responses:
        '200':
          description: Returns response containing statistics info about the current stream source.
          content:
            application/json:
              example: |-
                {
                "source": {"counter": 10000, "elapsed": "412.280797ms", "started": "2022-09-20T23:14:06.579683131+02:00", "status": "FINISHED"},
                "stream": "2F36TMjimx2AxO0FabwUwlPe7iZ"
                }
  /streams/target/stat:
    get:
      tags:
        - Stream stat
      summary: Prints current stream Target statistics.
      description: 'This endpoint outputs stat values of the current stream target'
      operationId: stream-target-stat
      responses:
        '200':
          description: Returns response containing statistics info about the current stream target.
          content:
            application/json:
              example: |-
                {
                  "target": {"counter": 10000, "elapsed": "1.516375992s", "started": "2022-09-20T23:14:06.639139919+02:00", "status": "FINISHED"},
                  "stream": "2F36TMjimx2AxO0FabwUwlPe7iZ"
                }
  /streams/source/metrics:
    post:
      tags:
        - Stream stat
      summary: Prints Prometheus metrics for the current stream source node.
      description: 'This endpoint serves the Prometheus metrics for stream source'
      operationId: stream-source-prometheus
      responses:
        '200':
          description: Returns response containing plain text prometheus metrics for the current stream source node.
          content:
            text/plain:
              example: |-
                ... skipped for bravity
                # HELP source_duration_seconds the duration of the last job on source in seconds.
                # TYPE source_duration_seconds gauge
                source_duration_seconds{status="FINISHED",streamID="2F37qQV54l9yfAgaWT8n2CQWP38"} 0.679539515
                # HELP source_events_in the number of ingested events on the source published to the event bus
                # TYPE source_events_in counter
                source_events_in{streamID="2F37qQV54l9yfAgaWT8n2CQWP38"} 10000
  /streams/target/metrics:
    post:
      tags:
        - Stream stat
      summary: Prints Prometheus metrics for the current stream target node.
      description: 'This endpoint serves the Prometheus metrics for stream target'
      operationId: stream-target-prometheus
      responses:
        '200':
          description: Returns response containing plain text prometheus metrics for the current stream target node.
          content:
            text/plain:
              example: |-
                ... skipped for bravity
                # HELP target_duration_seconds The duration of the last job on target in seconds.
                # TYPE target_duration_seconds gauge
                target_duration_seconds{status="FINISHED",streamID="2F37qQV54l9yfAgaWT8n2CQWP38"} 1.516375992
                # HELP target_events_out the number of events on the target consumed from the event bus
                # TYPE target_events_out counter
                target_events_out{streamID="2F37qQV54l9yfAgaWT8n2CQWP38"} 10000